def remote = [:]
  remote.name = 'tfg2010'
  remote.host = 'virtual.lab.inf.uva.es'
  remote.user = 'ansible'
  remote.port = 22
  remote.allowAnyHosts = true

pipeline {
    
    agent any
    
    stages {
        stage('Clone Git`s repository') {
            steps {
                dir("/var/lib/jenkins/workspace/TFG/Despliegue_ejercicios"){
                    script{
                        if (params.Action == 'apply') {
                            cleanWs()
                            git url: 'https://github.com/fsanjo268/TFG.git', branch: 'main' 
                        }
                    }
                }
            }
        }
         stage('Terraform init') {
            steps {
                dir("/var/lib/jenkins/workspace/TFG/Despliegue_ejercicios/Terraform/${params.Exercise}"){
                    sh 'terraform init'
                }
            }
        }
         stage('Terraform code validation') {
            steps {
                dir("/var/lib/jenkins/workspace/TFG/Despliegue_ejercicios/Terraform/${params.Exercise}"){
                    sh 'terraform validate'
                }
            }
        }
         stage ('Ansible code validation') {
            steps {
                dir("/var/lib/jenkins/workspace/TFG/Despliegue_ejercicios/Ansible/Playbooks"){
                    sh 'ansible-playbook --syntax-check ${params.Exercise}'
                }
            }
        }
        stage('Infraestructure plannification ') {
            steps {
                dir("/var/lib/jenkins/workspace/TFG/Despliegue_ejercicios/Terraform/${params.Exercise}"){
                     script{
                        if (params.Action == 'apply') {
                            sh 'terraform plan -out tfplan'      
                        }
                     }
                }
            }
        }
        
        stage('Apply / Destroy') {
            steps {
                dir("/var/lib/jenkins/workspace/TFG/Despliegue_ejercicios/Terraform/${params.Exercise}"){
                    retry(4){
                        script {
                            if (params.Action == 'apply') {
                                sh 'terraform apply -input=false tfplan'
                            } else if (params.Action == 'destroy') {
                                sh 'terraform destroy --auto-approve'
                            }
                        }
                    }
                }
            }
        }
        stage('Compressing Ansible folder') {
            when { expression { params.Action == 'apply'}}
            steps {
                fileOperations([fileZipOperation(folderPath: 'Ansible', outputFolderPath:'')])
                fileOperations([fileRenameOperation(destination: "${params.NameToTransfer}.zip", source: 'Ansible.zip')])
            }
        }
        stage('SSH file transfer to Ansible Node') {
            when { expression { params.Action == 'apply'}}
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'tfg2010', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'cd ./${params.NameOfTargetFolder} | unzip -o ${params.NameToTransfer}.zip | rm ${params.NameToTransfer}.zip | ls -l', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/${params.NameOfTargetFolder}', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '${params.NameToTransfer}.tar.gz')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
            }
        }
        stage('Execute ${params.Exercise} Playbook') {
            when { expression { params.Action == 'apply'}}
             steps {
                retry(4){
                    sshCommand remote: remote, command: "cd ./${params.NameOfTargetFolder}/Ansible/Playbooks/ | ansible-playbook module-1"
                }
            }
        }
        
    }
    post {
        success {
            script {
                if (params.Action == 'destroy') {
                    cleanWs()
                }
            }
        }
        failure {
            steps {
                script{
                    if (params.Action == 'apply') {
                        sh 'terraform destroy --auto-approve'
                    }
                }
            }
        }
    }
}